// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  name     String?
  email    String   @unique
  password String
  role     Role     @default(USER)
  created  DateTime
  updated  DateTime
  isActive Boolean  @default(true)

  Comment      Comment[]
  Like         Like[]
  WatchHistory WatchHistory[]
  Video        Video[]

  @@map("user")
}

enum Role {
  ADMIN
  USER
}

model Video {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  duration      String
  video_url     String
  thumbnail_url String
  category_id   Int?
  user_id       Int
  created       DateTime
  updated       DateTime

  Category Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  User     User      @relation(fields: [user_id], references: [id])

  Comment      Comment[]
  Like         Like[]
  WatchHistory WatchHistory[]

  @@map("video")
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String
  created DateTime
  updated DateTime

  Video Video[]

  @@map("category")
}

model Comment {
  id       Int      @id @default(autoincrement())
  content  String
  user_id  Int
  video_id Int
  created  DateTime
  updated  DateTime

  User  User  @relation(fields: [user_id], references: [id])
  Video Video @relation(fields: [video_id], references: [id])

  @@map("comment")
}

model Like {
  id       Int      @id @default(autoincrement())
  user_id  Int
  video_id Int
  created  DateTime
  updated  DateTime

  User  User  @relation(fields: [user_id], references: [id])
  Video Video @relation(fields: [video_id], references: [id])

  @@map("like")
}

model WatchHistory {
  id             Int      @id @default(autoincrement())
  user_id        Int
  video_id       Int
  duration_watch String
  created        DateTime
  updated        DateTime

  User  User  @relation(fields: [user_id], references: [id])
  Video Video @relation(fields: [video_id], references: [id])

  @@map("wathch_history")
}
